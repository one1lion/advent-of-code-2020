@page "/day11"

@inject HttpClient HttpClient

<DayDisplay GetAnswer1="GetAnswer1"
            GetAnswer2="GetAnswer2">
  <Title>
    <h2>--- Day @dayNum: @dayTitle ---</h2>
  </Title>
  <ProblemStatement1>
    <h3>-- Part 1 --</h3>
    <p>Your plane lands with plenty of time to spare. The final leg of your journey is a ferry that goes directly to the tropical island where you can finally start your vacation. As you reach the waiting area to board the ferry, you realize you're so early, nobody else has even arrived yet!</p>
    <p>By modeling the process people use to choose (or abandon) their seat in the waiting area, you're pretty sure you can predict the best place to sit. You make a quick map of the seat layout (your puzzle input).</p>
    <p>The seat layout fits neatly on a grid. Each position is either floor (<code>.</code>), an empty seat (<code>L</code>), or an occupied seat (<code>#</code>). For example, the initial seat layout might look like this:</p>
<pre><code>L.LL.LL.LL
LLLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLLL
L.LLLLLL.L
L.LLLLL.LL
</code></pre>
    <p>Now, you just need to model the people who will be arriving shortly. Fortunately, people are entirely predictable and always follow a simple set of rules. All decisions are based on the <em>number of occupied seats</em> adjacent to a given seat (one of the eight positions immediately up, down, left, right, or diagonal from the seat). The following rules are applied to every seat simultaneously:</p>
    <ul>
      <li>If a seat is <em>empty</em> (<code>L</code>) and there are <em>no</em> occupied seats adjacent to it, the seat becomes <em>occupied</em>.</li>
      <li>If a seat is <em>occupied</em> (<code>#</code>) and <em>four or more</em> seats adjacent to it are also occupied, the seat becomes <em>empty</em>.</li>
      <li>Otherwise, the seat's state does not change.</li>
    </ul>
    <p><span title="Floor... floor never changes.">Floor (<code>.</code>) never changes</span>; seats don't move, and nobody sits on the floor.</p>
    <p>After one round of these rules, every seat in the example layout becomes occupied:</p>
<pre><code>#.##.##.##
#######.##
#.#.#..#..
####.##.##
#.##.##.##
#.#####.##
..#.#.....
##########
#.######.#
#.#####.##
</code></pre>
    <p>After a second round, the seats with four or more occupied adjacent seats become empty again:</p>
<pre><code>#.LL.L#.##
#LLLLLL.L#
L.L.L..L..
#LLL.LL.L#
#.LL.LL.LL
#.LLLL#.##
..L.L.....
#LLLLLLLL#
#.LLLLLL.L
#.#LLLL.##
</code></pre>
    <p>This process continues for three more rounds:</p>
<pre><code>#.##.L#.##
#L###LL.L#
L.#.#..#..
#L##.##.L#
#.##.LL.LL
#.###L#.##
..#.#.....
#L######L#
#.LL###L.L
#.#L###.##
</code></pre>
<pre><code>#.#L.L#.##
#LLL#LL.L#
L.L.L..#..
#LLL.##.L#
#.LL.LL.LL
#.LL#L#.##
..L.L.....
#L#LLLL#L#
#.LLLLLL.L
#.#L#L#.##
</code></pre>
<pre><code>#.#L.L#.##
#LLL#LL.L#
L.#.L..#..
#L##.##.L#
#.#L.LL.LL
#.#L#L#.##
..L.L.....
#L#L##L#L#
#.LLLLLL.L
#.#L#L#.##
</code></pre>
    <p>At this point, something interesting happens: the chaos stabilizes and further applications of these rules cause no seats to change state! Once people stop moving around, you count <em><code>37</code></em> occupied seats.</p>
    <p>Simulate your seating area by applying the seating rules repeatedly until no seats change state. <em>How many seats end up occupied?</em></p>
  </ProblemStatement1>
  <Solution1>
    @((MarkupString)new CodeColorizer().Colorize(@"", Languages.CSharp))
  </Solution1>
  <ProblemStatement2>
    <h3>-- Part 2 --</h3>
    <p>As soon as people start to arrive, you realize your mistake. People don't just care about adjacent seats - they care about <em>the first seat they can see</em> in each of those eight directions!</p>
    <p>Now, instead of considering just the eight immediately adjacent seats, consider the <em>first seat</em> in each of those eight directions. For example, the empty seat below would see <em>eight</em> occupied seats:</p>
<pre><code>.......#.
...#.....
.#.......
.........
..#L....#
....#....
.........
#........
...#.....
</code></pre>
    <p>The leftmost empty seat below would only see <em>one</em> empty seat, but cannot see any of the occupied ones:</p>
<pre><code>.............
.L.L.#.#.#.#.
.............
</code></pre>
    <p>The empty seat below would see <em>no</em> occupied seats:</p>
<pre><code>.##.##.
#.#.#.#
##...##
...L...
##...##
#.#.#.#
.##.##.
</code></pre>
    <p>Also, people seem to be more tolerant than you expected: it now takes <em>five or more</em> visible occupied seats for an occupied seat to become empty (rather than <em>four or more</em> from the previous rules). The other rules still apply: empty seats that see no occupied seats become occupied, seats matching no rule don't change, and floor never changes.</p>
    <p>Given the same starting layout as above, these new rules cause the seating area to shift around as follows:</p>
<pre><code>L.LL.LL.LL
LLLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLLL
L.LLLLLL.L
L.LLLLL.LL
</code></pre>
<pre><code>#.##.##.##
#######.##
#.#.#..#..
####.##.##
#.##.##.##
#.#####.##
..#.#.....
##########
#.######.#
#.#####.##
</code></pre>
<pre><code>#.LL.LL.L#
#LLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLL#
#.LLLLLL.L
#.LLLLL.L#
</code></pre>
<pre><code>#.L#.##.L#
#L#####.LL
L.#.#..#..
##L#.##.##
#.##.#L.##
#.#####.#L
..#.#.....
LLL####LL#
#.L#####.L
#.L####.L#
</code></pre>
<pre><code>#.L#.L#.L#
#LLLLLL.LL
L.L.L..#..
##LL.LL.L#
L.LL.LL.L#
#.LLLLL.LL
..L.L.....
LLLLLLLLL#
#.LLLLL#.L
#.L#LL#.L#
</code></pre>
<pre><code>#.L#.L#.L#
#LLLLLL.LL
L.L.L..#..
##L#.#L.L#
L.L#.#L.L#
#.L####.LL
..#.#.....
LLL###LLL#
#.LLLLL#.L
#.L#LL#.L#
</code></pre>
<pre><code>#.L#.L#.L#
#LLLLLL.LL
L.L.L..#..
##L#.#L.L#
L.L#.LL.L#
#.LLLL#.LL
..#.L.....
LLL###LLL#
#.LLLLL#.L
#.L#LL#.L#
</code></pre>
    <p>Again, at this point, people stop shifting around and the seating area reaches equilibrium. Once this occurs, you count <em><code>26</code></em> occupied seats.</p>
    <p>Given the new visibility method and the rule change for occupied seats becoming empty, once equilibrium is reached, <em>how many seats end up occupied?</em></p>
  </ProblemStatement2>
  <Solution2>
    @((MarkupString)new CodeColorizer().Colorize(@"", Languages.CSharp))
  </Solution2>
</DayDisplay>

@code {
  int dayNum = 11;
  string dayTitle = "Seating System";

  bool useSample;
  List<char[]> input;
  protected override async Task OnInitializedAsync() {
    var resp = await HttpClient.GetAsync($"data/day{dayNum.ToString("0#")}/{(useSample ? "sample" : "input")}.txt");
    input = (await resp.Content.ReadAsStringAsync()).Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
      .Select(x => x.ToCharArray()).ToList();
  }

  string GetAnswer1() {
    prevState = null;
    return RunSimulation(input).ToString();
  }

  string GetAnswer2() {
    prevState = null;
    return RunSimulation2(input).ToString();
  }

  List<char[]> prevState;
  int RunSimulation(List<char[]> currentState) {
    // Count the number of seats if we are at a stable state
    if (StableCheck(currentState)) { return CountEmptySeats(currentState); }

    // if we are here, we are not at stable state
    // Save the current state into previous
    prevState = currentState.Select(x => x.Select(y => y).ToArray()).ToList();
    // Prepare the new state variable
    var newState = currentState.Select(x => x.Select(y => y).ToArray()).ToList();
    for (var i = 0; i < currentState.Count; i++) {
      for (var j = 0; j < currentState[i].Length; j++) {
        // If this is a floor space, ignore it
        if (currentState[i][j] == '.') { continue; }
        // Accumulate the number of filled seats around the current seat
        var adjFilledSeats = 0;
        // Top
        if (i > 0 && currentState[i - 1][j] == '#') {
          adjFilledSeats++;
        }

        // Top Right
        if (i > 0 && j < currentState[i - 1].Length - 1 && currentState[i - 1][j + 1] == '#') {
          adjFilledSeats++;
        }

        // Right
        if (j < currentState[i].Length - 1 && currentState[i][j + 1] == '#') {
          adjFilledSeats++;
        }

        // Bottom Right
        if (i < currentState.Count - 1 && j < currentState[i + 1].Length - 1 && currentState[i + 1][j + 1] == '#') {
          adjFilledSeats++;
        }

        // Bottom
        if (i < currentState.Count - 1 && currentState[i + 1][j] == '#') {
          adjFilledSeats++;
        }

        // Bottom Left
        if (i < currentState.Count - 1 && j > 0 && currentState[i + 1][j - 1] == '#') {
          adjFilledSeats++;
        }

        // Left
        if (j > 0 && currentState[i][j - 1] == '#') {
          adjFilledSeats++;
        }

        // Top Left
        if (i > 0 && j > 0 && currentState[i - 1][j - 1] == '#') {
          adjFilledSeats++;
        }

        if (adjFilledSeats >= 4 && currentState[i][j] == '#') {
          // A filled seat with 4 or more filled seats adjacent to it should be emptied
          newState[i][j] = 'L';
        } else if (adjFilledSeats == 0 && currentState[i][j] == 'L') {
          // An empty seat that should be filled
          newState[i][j] = '#';
        }
      }
    }
    return RunSimulation(newState);
  }

  int RunSimulation2(List<char[]> currentState) {
    // Count the number of seats if we are at a stable state
    if (StableCheck(currentState)) { return CountEmptySeats(currentState); }
    // if we are here, we are not at stable state
    // Save the current state into previous
    prevState = currentState.Select(x => x.Select(y => y).ToArray()).ToList();
    // Prepare the new state variable
    var newState = currentState.Select(x => x.Select(y => y).ToArray()).ToList();
    var seatSpace = new[] { 'L', '#' };
    for (var i = 0; i < currentState.Count; i++) {
      for (var j = 0; j < currentState[i].Length; j++) {
        // If this is a floor space, ignore it
        if (currentState[i][j] == '.') { continue; }
        // Accumulate the number of filled seats around the current seat
        //   Send the sight vector until it hits the edge or the first seat in view (non-floor)
        var adjFilledSeats = 0;
        var offsetRow = 1;
        var offsetCol = 1;
        // Top
        while (i - offsetRow >= 0 && !seatSpace.Contains(currentState[i - offsetRow][j])) {
          offsetRow++;
          offsetCol++;
        }
        if (i - offsetRow >= 0 && currentState[i - offsetRow][j] == '#') {
          adjFilledSeats++;
        }

        // Top Right
        offsetRow = 1;
        offsetCol = 1;
        while (i - offsetRow >= 0 && j + offsetCol < currentState[i - offsetRow].Length && !seatSpace.Contains(currentState[i - offsetRow][j + offsetCol])) {
          offsetRow++;
          offsetCol++;
        }
        if (i - offsetRow >= 0 && j + offsetCol < currentState[i - offsetRow].Length && currentState[i - offsetRow][j + offsetCol] == '#') {
          adjFilledSeats++;
        }

        // Right
        offsetRow = 1;
        offsetCol = 1;
        while (j + offsetCol < currentState[i].Length && !seatSpace.Contains(currentState[i][j + offsetCol])) {
          offsetRow++;
          offsetCol++;
        }
        if (j + offsetCol < currentState[i].Length && currentState[i][j + offsetCol] == '#') {
          adjFilledSeats++;
        }

        // Bottom Right
        offsetRow = 1;
        offsetCol = 1;
        while (i + offsetRow < currentState.Count && j + offsetCol < currentState[i + offsetRow].Length && !seatSpace.Contains(currentState[i + offsetRow][j + offsetCol])) {
          offsetRow++;
          offsetCol++;
        }
        if (i + offsetRow < currentState.Count && j + offsetCol < currentState[i + offsetRow].Length && currentState[i + offsetRow][j + offsetCol] == '#') {
          adjFilledSeats++;
        }

        // Bottom
        offsetRow = 1;
        offsetCol = 1;
        while (i + offsetRow < currentState.Count && !seatSpace.Contains(currentState[i + offsetRow][j])) {
          offsetRow++;
          offsetCol++;
        }
        if (i + offsetRow < currentState.Count && currentState[i + offsetRow][j] == '#') {
          adjFilledSeats++;
        }

        // Bottom Left
        offsetRow = 1;
        offsetCol = 1;
        while (i + offsetRow < currentState.Count && j - offsetCol >= 0 && !seatSpace.Contains(currentState[i + offsetRow][j - offsetCol])) {
          offsetRow++;
          offsetCol++;
        }
        if (i + offsetRow < currentState.Count && j - offsetCol >= 0 && currentState[i + offsetRow][j - offsetCol] == '#') {
          adjFilledSeats++;
        }

        // Left
        offsetRow = 1;
        offsetCol = 1;
        while (j - offsetCol >= 0 && !seatSpace.Contains(currentState[i][j - offsetCol])) {
          offsetRow++;
          offsetCol++;
        }
        if (j - offsetCol >= 0 && currentState[i][j - offsetCol] == '#') {
          adjFilledSeats++;
        }

        // Top Left
        offsetRow = 1;
        offsetCol = 1;
        while (i - offsetRow >= 0 && j - offsetCol >= 0 && !seatSpace.Contains(currentState[i - offsetRow][j - offsetCol])) {
          offsetRow++;
          offsetCol++;
        }
        if (i - offsetRow >= 0 && j - offsetCol >= 0 && currentState[i - offsetRow][j - offsetCol] == '#') {
          adjFilledSeats++;
        }

        if (adjFilledSeats >= 5 && currentState[i][j] == '#') {
          // A filled seat with 4 or more filled seats adjacent to it should be emptied
          newState[i][j] = 'L';
        } else if (adjFilledSeats == 0 && currentState[i][j] == 'L') {
          // An empty seat that should be filled
          newState[i][j] = '#';
        }
      }
    }
    return RunSimulation2(newState);
  }

  bool StableCheck(List<char[]> currentState) {
    if (prevState is null) {
      return false;
    }
    // Check for stable (prevState == currentState)
    var stable = true;
    for (var i = 0; i < currentState.Count; i++) {
      for (var j = 0; j < currentState[i].Length; j++) {
        if (currentState[i][j] != prevState[i][j]) {
          stable = false;
          break;
        }
      }
    }
    // Count the number of seats if we are at a stable state
    return stable;
  }

  int CountEmptySeats(List<char[]> state) {
    var acc = 0;
    foreach (var curRow in state) {
      acc += curRow.Where(x => x == '#').Count();
    }
    return acc;
  }
}
