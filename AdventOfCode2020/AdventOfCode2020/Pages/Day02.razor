@page "/day02"
@using AdventOfCode2020.Models.Day02
@inject HttpClient HttpClient


<DayDisplay GetAnswer1="GetAnswer1"
            GetAnswer2="GetAnswer2">
  <Title>
    <h2>--- Day 2: Password Philosophy ---</h2>
  </Title>
  <ProblemStatement1>
    <h3>-- Part 1 --</h3>
    <p>Your flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via <a href="https://en.wikipedia.org/wiki/Toboggan" target="_blank">toboggan</a>.</p>
    <p>The shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. "Something's wrong with our computers; we can't log in!" You ask if you can take a look.</p>
    <p>Their password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the <span title="To ensure your safety, your password must be the following string...">Official Toboggan Corporate Policy</span> that was in effect when they were chosen.</p>
    <p>To try to debug the problem, they have created a list (your puzzle input) of <em>passwords</em> (according to the corrupted database) and <em>the corporate policy when that password was set</em>.</p>
    <p>For example, suppose you have the following list:</p>
<pre><code>1-3 a: abcde
1-3 b: cdefg
2-9 c: ccccccccc
</code></pre>
    <p>Each line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, <code>1-3 a</code> means that the password must contain <code>a</code> at least <code>1</code> time and at most <code>3</code> times.</p>
    <p>In the above example, <code><em>2</em></code> passwords are valid. The middle password, <code>cdefg</code>, is not; it contains no instances of <code>b</code>, but needs at least <code>1</code>. The first and third passwords are valid: they contain one <code>a</code> or nine <code>c</code>, both within the limits of their respective policies.</p>
    <p><em>How many passwords are valid</em> according to their policies?</p>
  </ProblemStatement1>
  <ProblemStatement2>
    <h3>-- Part 2 --</h3>
    <p>Your flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via <a href="https://en.wikipedia.org/wiki/Toboggan" target="_blank">toboggan</a>.</p>
    <p>The shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. "Something's wrong with our computers; we can't log in!" You ask if you can take a look.</p>
    <p>Their password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the <span title="To ensure your safety, your password must be the following string...">Official Toboggan Corporate Policy</span> that was in effect when they were chosen.</p>
    <p>To try to debug the problem, they have created a list (your puzzle input) of <em>passwords</em> (according to the corrupted database) and <em>the corporate policy when that password was set</em>.</p>
    <p>For example, suppose you have the following list:</p>
<pre><code>1-3 a: abcde
1-3 b: cdefg
2-9 c: ccccccccc
</code></pre>
    <p>Each line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, <code>1-3 a</code> means that the password must contain <code>a</code> at least <code>1</code> time and at most <code>3</code> times.</p>
    <p>In the above example, <code><em>2</em></code> passwords are valid. The middle password, <code>cdefg</code>, is not; it contains no instances of <code>b</code>, but needs at least <code>1</code>. The first and third passwords are valid: they contain one <code>a</code> or nine <code>c</code>, both within the limits of their respective policies.</p>
    <p><em>How many passwords are valid</em> according to their policies?</p>
  </ProblemStatement2>
</DayDisplay>

@code {
  List<PasswordInfo> input;

  protected override async Task OnInitializedAsync() {
    // Input e.g.: 
    //   8-9 x: xxxxxxxrk
    // Where 
    //  "8-9" is a limit of how many times the specified character must exist in the password
    //  "x" is the character that must exist the specified number of times
    //  "xxxxxxxrk" is the password
    var resp = await HttpClient.GetAsync("data/day02/input.txt");
    input = (await resp.Content.ReadAsStringAsync())
      .Split('\r', '\n')
      .Where(x => !string.IsNullOrWhiteSpace(x) && x.Contains("-"))
      .Select(x => new PasswordInfo() {
        MinCount = int.Parse(x.Split("-")[0]),
        MaxCount = int.Parse(x.Split("-")[1].Split(" ")[0]),
        WhichChar = x.Split(" ")[1][0],
        Password = x.Split(" ").Last()
      })
      .ToList();
    //Console.WriteLine(string.Join("\r\n", input));
  }

  string GetAnswer1() {
    return input.Count(x => x.IsValid).ToString();
  }

  string GetAnswer2() {
    return input.Count(x => x.IsValid2).ToString();
  }
}
